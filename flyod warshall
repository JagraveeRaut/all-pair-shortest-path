#include <stdio.h>
 #define INF 99999
 #define MAX 50
 // Function to implement Floyd-Warshall 
Algorithm
 void floydWarshall(int graph[MAX][MAX], int 
n) {
    int dist[MAX][MAX];
    // Initialize distance matrix same as 
input graph
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dist[i][j] = graph[i][j];
        }
    }
    // Floyd-Warshall algorithm
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] + dist[k][j] <
 dist[i][j]) {
                    dist[i][j] = dist[i][k] +
 dist[k][j];
                }
            }
        }
    }
    // Print the shortest distance matrix
    printf("\nAll Pairs Shortest Path 
Matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INF)
                printf("%7s", "INF");
            else
                printf("%7d", dist[i][j]);
        }
        printf("\n");
    }
 }
 int main() {
    int n;
    int graph[MAX][MAX];
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix (%dx%d) 
(use 0 for no edge):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
            if (i != j && graph[i][j] == 0) {
                graph[i][j] = INF; // No edge
 represented as INF
            }
        }
    }
    floydWarshall(graph, n);
    return 0;
 }
